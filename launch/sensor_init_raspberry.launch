<launch>

    <arg name="IMU_1_port" default="/dev/ttyUSB0"/>
    <arg name="IMU_1_enable" default="true"/>
    <arg name="IMU_2_port" default="/dev/ttyUSB2"/>
    <arg name="IMU_2_enable" default="false"/>
    <arg name="IMU_steer_port" default="/dev/ttyUSB1"/>
    <arg name="IMU_steer_enable" default="true"/>

    <arg name="GPS_front_port" default="/dev/ttyUSB2"/>
    <arg name="GPS_front_enable" default="true"/>
    <arg name="GPS_rear_port" default="/dev/ttyUSB3"/>
    <arg name="GPS_rear_enable" default="true"/>

    <arg name="arduino_port" default="/dev/ttyACM0"/>
    <arg name="arduino_enable" default="true"/>

    <arg name="check_system_state" default="true"/>

    <!-- check system state -->
    <node if="$(arg check_system_state)" pkg="autonomous_bicycle" type="ros_state_checker.py"
          name="ros_state_checker" respawn="true">
        <param name="rate" type="double" value="1.0" />
    </node>

    <!-- Publish imu 1 data -->
    <node if="$(arg IMU_1_enable)" pkg="autonomous_bicycle"
          type="sensor_imu_publisher.py" name="sensor_imu_publisher_1" respawn="true">
        <param name="rate" type="int" value="200" />

        <rosparam param="publish_transform">True</rosparam>
        <rosparam param="static_transform">[0.0, 0.0, 0.5, 0.0, 0.0, 0.0]</rosparam>

        <param name="serial_port" type="string" value="$(arg IMU_1_port)" />
        <param name="topic_name" type="string" value="/bicycle/imu_1" />
        <param name="fixed_frame" type="string" value="world" />
        <param name="frame_name" type="string" value="imu_1" />
    </node>

    <!-- Publish imu 2 data -->
    <node if="$(arg IMU_2_enable)" pkg="autonomous_bicycle"
          type="sensor_imu_publisher.py" name="sensor_imu_publisher_2" respawn="true" >
        <param name="rate" type="int" value="200" />

        <rosparam param="publish_transform">True</rosparam>
        <rosparam param="static_transform">[1.0, 1.0, 0.5, 0.0, 0.0, 0.0]</rosparam>

        <param name="serial_port" type="string" value="$(arg IMU_2_port)" />
        <param name="topic_name" type="string" value="/bicycle/imu_2" />
        <param name="fixed_frame" type="string" value="world" />
        <param name="frame_name" type="string" value="imu_2" />
    </node>

    <!-- Publish imu steering data -->
    <node if="$(arg IMU_steer_enable)" pkg="autonomous_bicycle"
          type="sensor_imu_publisher.py" name="sensor_imu_publisher_steering" respawn="true" >
        <param name="rate" type="int" value="200" />

        <rosparam param="publish_transform">True</rosparam>
        <rosparam param="static_transform">[1.0, 0.0, 0.5, 0.0, 0.0, 0.0]</rosparam>

        <param name="serial_port" type="string" value="$(arg IMU_steer_port)" />
        <param name="topic_name" type="string" value="/bicycle/imu_steering" />
        <param name="fixed_frame" type="string" value="world" />
        <param name="frame_name" type="string" value="imu_steering" />
    </node>

    <!-- Publish GPS 1 data -->
    <node if="$(arg GPS_front_enable)" pkg="nmea_navsat_driver"
          type="nmea_serial_driver" name="nmea_serial_driver_gps_front"
          respawn="true" ns="GPS_front" >

        <remap to="/bicycle/gps_front"          from="/GPS_front/fix" />
        <remap to="/bicycle/gps_front_velocity" from="/GPS_front/vel" />
        <remap to="/bicycle/gps_front_time_ref" from="/GPS_front/time_reference" />

        <param name="port" type="string" value="$(arg GPS_front_port)" />
        <param name="baud" type="int" value="115200" />
        <param name="frame_id" type="string" value="gps_front" />
        <param name="time_ref_source" type="string" value="gps_front" />
        <param name="useRMC" type="bool" value="false" />
    </node>

    <!-- Publish GPS 2 data -->
    <node if="$(arg GPS_rear_enable)" pkg="nmea_navsat_driver"
          type="nmea_serial_driver" name="nmea_serial_driver_gps_rear"
          respawn="true" ns="GPS_rear" >
        <remap to="/bicycle/gps_rear"           from="/GPS_rear/fix" />
        <remap to="/bicycle/gps_rear_velocity"  from="/GPS_rear/vel" />
        <remap to="/bicycle/gps_rear_time_ref"  from="/GPS_rear/time_reference" />

        <param name="port" type="string" value="$(arg GPS_rear_port)" />
        <param name="baud" type="int" value="115200" />
        <param name="frame_id" type="string" value="gps_rear" />
        <param name="time_ref_source" type="string" value="gps_rear" />
        <param name="useRMC" type="bool" value="false" />
    </node>

    <!-- Publish Arduino data -->
    <node if="$(arg arduino_enable)" pkg="rosserial_python"
          type="serial_node.py" name="serial_node" respawn="true" >
        <param name="port" type="string" value="$(arg arduino_port)" />

        <remap to="/bicycle/altitude"   from="/altitude" />
        <remap to="/bicycle/distance"   from="/distance" />
        <remap to="/bicycle/velocity"   from="/velocity" />
    </node>

    <!-- Start ros bridge server -->
    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" >
        <arg name="port" value="9090"/>
        <arg name="ssl" default="false" />
        <arg name="authenticate" default="false" />
        <arg name="certfile" default="/home/ubuntu/Documents/code/node-login/app/server/ssl/server_cert.pem"/>
        <arg name="keyfile" default="/home/ubuntu/Documents/code/node-login/app/server/ssl/server_key.pem" />
    </include>

    <!-- launch bag recorder node -->
    <node pkg="autonomous_bicycle" type="storage_bag_recorder.py"
          name="storage_bag_recorder" respawn="true" output="screen" >
        <param name="default_folder" value="$(find autonomous_bicycle)/data/" />
        <param name="rate" value="100" />
    </node>

    <!--  start image streaming -->
    <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" respawn="true" >
        <param name="video_device" value="/dev/video0" />
        <param name="framerate" value="10" />
        <param name="image_width" value="320" />
        <param name="image_height" value="240" />
        <param name="pixel_format" value="yuyv" />
        <param name="camera_frame_id" value="usb_cam" />
        <param name="io_method" value="mmap"/>
        <param name="camera_info_url"
               value="file://$(find autonomous_bicycle)/config/calibration_files/camera_calibration_640_480.yaml"/>

        <remap to="/bicycle/camera_info"    from="/usb_cam/camera_info" />
        <remap to="/bicycle/image_raw"      from="/usb_cam/image_raw" />
    </node>

    <!-- create a web_video_server -->
    <node pkg="web_video_server" type="web_video_server" name="web_video_server"
          respawn="true"  output="screen" >
        <param name="width" value="320" />
        <param name="height" value="240" />
        <param name="quality" value="60" />
        <param name="invert" value="" />
    </node>

    <!-- Launch nodeJS app -->
    <node pkg="autonomous_bicycle" type="launch_node_js_app.sh" name="load_node_js"   output="screen" />

</launch>
